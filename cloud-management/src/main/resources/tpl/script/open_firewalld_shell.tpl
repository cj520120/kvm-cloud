#!/bin/bash  
  
# 获取输入参数  
cmd=$1
protocol=$2
local_port=$3
remote_ip=$4
remote_port=$5  
relaod_firewalld=0
# 验证输入参数是否为空  
if [ -z "$cmd" ] || [ -z "$local_port" ] || [ -z "$protocol" ]; then  
  echo "请输入完整的参数：命令 协议 本地端口、远程IP和远程端口"  
  exit 1  
fi  
  
# 验证防火墙是否已开启  
if ! firewall-cmd --state; then  
  echo "防火墙未开启，开始启用防火墙"  
  systemctl start firewalld
fi  

if [ $cmd == 'add-forward' ]; then
  if [ -z "$remote_ip" ] || [ -z "$remote_port" ]; then
    echo "请输入:远程IP和远程端口"  
    exit 1
  fi
  if ! firewall-cmd --zone=public --query-port=$local_port/$protocol; then
    firewall-cmd --permanent --zone=public --add-port=$local_port/$protocol
    relaod_firewalld=1
  fi
  if ! firewall-cmd --zone=public --query-forward-port=port=$local_port:proto=$protocol:toaddr=$remote_ip:toport=$remote_port; then
    firewall-cmd --permanent --zone=public --add-forward-port=port=$local_port:proto=$protocol:toaddr=$remote_ip:toport=$remote_port
    relaod_firewalld=1
  fi 
elif  [ $cmd == 'del-forward' ]; then
  if [ -z "$remote_ip" ] || [ -z "$remote_port" ]; then
    echo "请输入远程IP和远程端口"  
    exit 1
  fi

  if firewall-cmd --zone=public --query-port=$local_port/$protocol; then
    firewall-cmd --permanent --zone=public --remove-port=$local_port/$protocol
    relaod_firewalld=1
  fi
  if firewall-cmd --zone=public --query-forward-port=port=$local_port:proto=$protocol:toaddr=$remote_ip:toport=$remote_port; then
    firewall-cmd --permanent --zone=public --remove-forward-port=port=$local_port:proto=$protocol:toaddr=$remote_ip:toport=$remote_port
    relaod_firewalld=1
  fi 
elif  [ $cmd == 'add-port' ]; then
  if ! firewall-cmd --zone=public --query-port=$local_port/$protocol; then
    firewall-cmd --permanent --zone=public --add-port=$local_port/$protocol
    relaod_firewalld=1
  fi
  firewall-cmd --reload
elif [ $cmd == 'remove-port' ]; then
  if firewall-cmd --zone=public --query-port=$local_port/$protocol; then
    firewall-cmd --permanent --zone=public --remove-port=$local_port/$protocol
    relaod_firewalld=1
  fi
else
  echo "无效的命令"
fi
if [ $relaod_firewalld -eq 1 ];then
  firewall-cmd --reload
fi