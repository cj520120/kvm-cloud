import websocket
import hashlib
import time
import json
import subprocess

managerUri='{{__SYS__["default.cluster.manager.uri"]}}'
networkScrect:str='{{secret}}'
networkId:str='{{networkId}}'
componentId:str='{{componentId}}'
def md5(data):
    md5 = hashlib.md5()
    md5.update(data.encode('utf-8'))
    return md5.hexdigest()
def shell_run(cmd):
    process = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    lines=''
    while process.poll() is None:
        line = process.stdout.readline()
        line = line.strip()
        if line:
            lines+=line.decode("utf-8", 'ignore')+'\n'
    return lines.strip()

def check_has_port (check_data,data_list):
    for data in data_list:
        if data['protocol'] == check_data['protocol'] and data['localPort'] == check_data['localPort']:
            return True
    return False
def check_has_forward(check_data,data_list):
    for data in data_list:
        if data['protocol']== check_data['protocol'] and data['localPort'] == check_data['localPort'] and check_data['remoteIp']== data['remoteIp'] and check_data['remotePort']==data['remotePort']:
            return True
    return False
def on_message(ws, message):
    data=json.loads(message)
    if data['command']==201:
        ws.send('{"command":207}')
    elif data['command']==203:
        if data['data']['type']==102:
            open_ports=get_firewalld_port_list()
            open_forwards=get_firewalld_forward_list()
            b_reload_firewalld=False
            for open in open_ports:
                if not check_has_port(open,data['data']['data']):
                    cmd="firewall-cmd --zone=public --remove-port={0}/{1}".format(open['localPort'],open['protocol'])
                    print('移除端口',cmd)
                    shell_run(cmd)
                    b_reload_firewalld=True
            for open in open_forwards:
                if not check_has_forward(open,data['data']['data']):
                    cmd="firewall-cmd --zone=public --remove-forward-port=port={0}:proto={1}:toaddr={2}:toport={3}".format(open['localPort'],open['protocol'],open['remoteIp'],open['remotePort'])
                    print('移除转发',cmd)
                    shell_run(cmd)
                    b_reload_firewalld=True
            for nat in data['data']['data']:
                if not check_has_port(nat,open_ports):
                    cmd="firewall-cmd --zone=public --add-port={0}/{1}".format(nat['localPort'],nat['protocol'])
                    print('注册端口',cmd)
                    shell_run(cmd)
                    b_reload_firewalld=True
                if not check_has_forward(nat,open_forwards):
                    cmd="firewall-cmd --zone=public --add-forward-port=port={0}:proto={1}:toaddr={2}:toport={3}".format(nat['localPort'],nat['protocol'],nat['remoteIp'],nat['remotePort'])
                    print('注册转发',cmd)
                    shell_run(cmd)
                    b_reload_firewalld=True

            if b_reload_firewalld:
                print("重新加载防火墙")
                shell_run("firewall-cmd --runtime-to-permanent")

def get_firewalld_port_list():
    lines = shell_run(['firewall-cmd --list-ports']).split(' ')
    open_ports=[]
    for line  in lines:
        if line:
            parts = line.split('/')
            open_ports.append({
                'localPort':int(parts[0]),
                'protocol':parts[1],
            })
    return open_ports

def get_firewalld_forward_list():
    lines = shell_run(['firewall-cmd --list-forward-ports']).split('\n')
    open_forwards=[]
    for line  in lines:
        if line:
            parts = line.split(':')
            localPort=0
            protocol = ''
            remoteIp=''
            remotePort=0
            for part in parts:
                if part.startswith("port="):
                    localPort=int(part.split("=")[1])
                elif part.startswith("proto="):
                    protocol=part.split("=")[1]
                elif part.startswith("toport="):
                    remotePort=int(part.split("=")[1])
                elif part.startswith("toaddr="):
                    remoteIp=part.split("=")[1]


            port = parts[1]
            open_forwards.append({
                'remoteIp':remoteIp,
                'remotePort':remotePort,
                'protocol':protocol ,
                'localPort':localPort ,
            })
    return open_forwards


def on_error(ws, error):
    print(error)

def on_close(ws,a,b):
    print("WebSocket连接已关闭")

def on_open(ws):
    print("WebSocket连接已打开")
    send_ws_login(ws)

def send_ws_login(ws):
    nonce = str(int(round(time.time() * 1000)))
    sign = md5('{0}:{1}:{2}:{3}'.format(networkScrect, networkId, componentId,nonce))
    send_msg={
        'command':200,
        'data':{
            'nonce':nonce,
            'sign':sign,
            'networkId':networkId,
            'componentId':componentId
        }
    }
    body=json.dumps(send_msg)
    ws.send(body)



if __name__ == "__main__":
    while True:
        ws_url=managerUri.replace('http', 'ws', 1)+'/api/component/ws'
        ws = websocket.WebSocketApp(ws_url,
                                on_message=on_message,
                                on_error=on_error,
                                on_close=on_close)
        ws.on_open = on_open
        ws.run_forever()
        time.sleep(1)