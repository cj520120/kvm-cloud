# pip3 install flask
from flask import Flask, request, make_response
import requests
import hashlib
import time
app = Flask(__name__)

MANGE_URI = '{{managerUri}}'

NETWOR_SECERT = '{{secret}}'


def build_header(ip):
    md5 = hashlib.md5()
    nonce = str(int(round(time.time() * 1000)))
    md5.update('{0}:{1}:{2}'.format(NETWOR_SECERT, nonce, ip).encode('utf-8'))
    sign = md5.hexdigest()
    return {
        'X-Real-IP': ip,
        'X-Nonce': nonce,
        'X-Sign': sign
    }
    
@app.route('/')
def index():
    return '',200

@app.route('/vendor-data')
def get_vendor_data():
    ip: str = request.headers.get('X-Real-IP')
    print('{0}/vendor-data/'.format(MANGE_URI))
    with requests.get('{0}/vendor-data/'.format(MANGE_URI), headers=build_header(ip)) as response:

        return response.text, response.status_code



@app.route('/meta-data')
def get_meta_data():
    ip: str = request.headers.get('X-Real-IP')
    print('{0}/meta-data/'.format(MANGE_URI))
    with requests.get('{0}/meta-data/'.format(MANGE_URI), headers=build_header(ip)) as response:

        return response.text, response.status_code



@app.route('/user-data')
def get_user_data():
    ip: str = request.headers.get('X-Real-IP')
    with requests.get('{0}/user-data'.format(MANGE_URI), headers=build_header(ip)) as response:
        return response.text, response.status_code, [("Content-Type", response.headers.get("Content-Type"))]


if __name__ == '__main__':
    app.run(host='127.0.0.1', port=9088)
